# FastAPI application with CPU-only PyTorch
FROM python:3.12-slim AS base

FROM base AS backend

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
# ENV PYTHONPATH="/app:${PYTHONPATH}" # PYTHONPATH is already set in your docker-compose.cpu.yml, can be redundant here but harmless

# Install system dependencies, including Java for TorchServe
RUN apt-get update && apt-get install -y \
    curl \
    git \
    gcc \
    g++ \
    openjdk-17-jdk \
    postgresql-client \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install Poetry
RUN pip install --no-cache-dir poetry

# Copy Poetry files from the api directory on the host to the current WORKDIR (/app) in the image
COPY api/pyproject.toml api/poetry.lock ./api/

# Install dependencies (--no-root to skip installing the project itself)
# This installs dependencies defined in /app/pyproject.toml
WORKDIR /app/api
RUN poetry config virtualenvs.create false && \
    poetry install --no-dev --no-interaction

# Install CPU-only PyTorch, TorchServe, torch-model-archiver, and additional packages
RUN pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu && \
    pip install \
    torchserve \
    torch-model-archiver

# Copy application source code from host to image
# Host's ./api directory is copied to /app/api in the image
# Host's ./ml directory is copied to /app/ml in the image
COPY api/ .
COPY ml/ /app/ml/
COPY scripts/ /app/scripts/
# It's also good practice to copy the start.sh script into the image,
# though your docker-compose currently runs it from the volume mount.
# COPY api/docker/start.sh /app/start.sh
# RUN chmod +x /app/start.sh

# Create a models directory in the image
RUN mkdir -p ./models

# Expose the port the app runs on (FastAPI)
# TorchServe ports (8080, 8081) are also used but managed by TorchServe itself
EXPOSE 8000

# Command to run the application
# This CMD will be overridden by the 'command: /app/api/docker/start.sh'
# in your docker-compose.cpu.yml.
# Having a default CMD is still good practice if the image is run standalone.
CMD ["/app/api/docker/start.sh"]

FROM base AS loader
WORKDIR /app
COPY --from=backend /app /app
CMD ["python", "scripts/load_dataset.py"]
