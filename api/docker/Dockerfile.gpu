# ------------------------------------------------------------
# WhereIsThisPlace – GPU backend image (TorchServe + FastAPI + FAISS-GPU)
# ------------------------------------------------------------
FROM pytorch/torchserve:0.10.0-gpu

# Build-time variables & environment
ARG FAISS_VER=1.7.4
ENV DEBIAN_FRONTEND=noninteractive \
    FAISS_ENABLE_GPU=ON \
    FAISS_OPT_LEVEL=avx2 \
    CMAKE_CUDA_ARCHITECTURES="75" \
    PATH="/usr/local/cuda/bin:${PATH}" \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

# Explicitly switch to root user for system package installation
USER root

# 1. System deps for FAISS build
RUN apt-get update && apt-get install -y --no-install-recommends \
      build-essential cmake ninja-build git swig \
      libopenblas-dev ca-certificates wget && \
    rm -rf /var/lib/apt/lists/*

# 2. Copy application source
WORKDIR /app
COPY api/ ./api
COPY ml/  ./ml
# If you have a 'models' directory in the build context for where-v1.mar, copy it too
COPY models/ /app/models

# 3. Python deps
RUN pip install --no-cache-dir poetry==1.8.3 && \
    # Ensure the pyproject.toml in ./api is valid for poetry export
    # If poetry export fails due to missing fields, ensure api/pyproject.toml is complete
    poetry --directory ./api export --without-hashes --only main -f requirements.txt | \
    pip install --no-cache-dir -r /dev/stdin && \
    # Removed cmake and ninja from here, as they are installed by apt-get in step 1
    pip install --no-cache-dir uvicorn[standard] pybind11

# 4. Build & install FAISS-GPU (≈ 7-10 min)
RUN apt-get update && \
    apt-get install -y wget && \
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \
    gpg --dearmor - | \
    tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
    echo 'deb https://apt.kitware.com/ubuntu/ focal main' | \
    tee /etc/apt/sources.list.d/kitware.list >/dev/null && \
    apt-get update && \
    apt-get install -y cmake && \
    cmake --version
# Assuming CUDA is in /usr/local/cuda in the base image.
RUN git clone --depth 1 --branch v${FAISS_VER} https://github.com/facebookresearch/faiss.git && \
    cmake -G Ninja -S faiss -B faiss/build \
        -DFAISS_ENABLE_GPU=${FAISS_ENABLE_GPU} \
        -DFAISS_ENABLE_PYTHON=ON \
        -DFAISS_OPT_LEVEL=${FAISS_OPT_LEVEL} \
        -DCMAKE_CUDA_ARCHITECTURES=${CMAKE_CUDA_ARCHITECTURES} \
        -DCUDAToolkit_ROOT=/usr/local/cuda && \
    cmake --build faiss/build --target swigfaiss_avx2 faiss && \
    cmake --install faiss/build && \
    # The FAISS Python bindings are typically installed from the build directory
    pip install faiss/build/faiss/python && \
    rm -rf faiss

# 5. Optional model artefact (copied only if present)
# This step assumes 'models/where-v1.mar' was copied to /app/models/ earlier
RUN mkdir -p /model-store && \
    if [ -f /app/models/where-v1.mar ]; then cp /app/models/where-v1.mar /model-store/; fi

# 6. Expose ports (8080 TorchServe, 8081 FastAPI)
EXPOSE 8080 8081

# 7. Entrypoint
COPY api/docker/start.sh /start.sh
RUN chmod +x /start.sh
CMD ["/start.sh"]

# If the base image pytorch/torchserve expects to run its CMD as a specific non-root user,
# you might need to switch to that user here. For example:
# USER torchserve # Or the appropriate user for the base image
