version: '3.8'

services:
  # CPU-only backend
  backend:
    build:
      context: .
      dockerfile: api/docker/Dockerfile.cpu
    image: where-backend:cpu
    container_name: where-backend
    ports:
      - "8000:8000"
      - "8080:8080" 
      - "8081:8081"
    environment:
      - DATABASE_URL=postgresql://whereuser:wherepass@postgres:5432/whereisthisplace
      - MAPBOX_TOKEN=${MAPBOX_TOKEN:-your_mapbox_token_here}
      - IMAGE_TTL_HOURS=24
      - MODEL_PATH=/model-store
    volumes:
      - ./api:/app/api:rw
      - ./ml:/app/ml:rw
      - ./models:/model-store:ro
      - model-store:/model-store
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - where-network
    # Remove the command and let the Dockerfile handle it
    # The Dockerfile already has the correct logic to find main.py

  postgres:
    image: postgis/postgis:15-3.5
    container_name: where-postgres
    environment:
      - POSTGRES_USER=whereuser
      - POSTGRES_PASSWORD=wherepass
      - POSTGRES_DB=whereisthisplace
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whereuser -d whereisthisplace"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - where-network

  adminer:
    image: adminer
    container_name: where-adminer
    ports:
      - "8090:8080"
    depends_on:
      - postgres
    networks:
      - where-network

volumes:
  postgres-data:
    driver: local
  model-store:
    driver: local

networks:
  where-network:
    driver: bridge