services:
  # GPU-enabled backend
  backend:
    build:
      context: .
      dockerfile: api/docker/Dockerfile.gpu
    image: where-backend:gpu
    container_name: where-backend
    ports:
      - "8000:8000"  # FastAPI
      - "8080:8080"  # TorchServe inference
      - "8081:8081"  # TorchServe management
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
      - DATABASE_URL=postgresql://whereuser:wherepass@postgres:5432/whereisthisplace
      - MAPBOX_TOKEN=${MAPBOX_TOKEN:-your_mapbox_token_here}
      - IMAGE_TTL_HOURS=24
      - MODEL_PATH=/model-store
      - PYTHONPATH=/app
      - ENV=production
      - LOG_LEVEL=INFO
    volumes:
      - ./api:/app/api:ro
      - ./ml:/app/ml:ro
      - model-store:/model-store
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - where-network
    restart: unless-stopped

  # PostgreSQL with PostGIS and pgvector
  postgres:
    image: ankane/pgvector:v0.5.1
    container_name: where-postgres
    environment:
      - POSTGRES_USER=whereuser
      - POSTGRES_PASSWORD=wherepass
      - POSTGRES_DB=whereisthisplace
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whereuser -d whereisthisplace"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - where-network
    restart: unless-stopped

  # Optional: Adminer for database management (only in development)
  adminer:
    image: adminer:latest
    container_name: where-adminer
    ports:
      - "8090:8080"
    depends_on:
      - postgres
    networks:
      - where-network
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    profiles:
      - tools

volumes:
  postgres-data:
    driver: local
  model-store:
    driver: local

networks:
  where-network:
    driver: bridge