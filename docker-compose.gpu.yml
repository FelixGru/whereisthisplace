version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: where-postgres
    environment:
      # These can also be moved to .env if you prefer consistency
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: whereisthisplace
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql # Ensure this init script is suitable
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - whereisthisplace-network

  backend:
    image: 726580147864.dkr.ecr.eu-central-1.amazonaws.com/where-backend:latest
    container_name: where-backend-gpu
    runtime: nvidia
    # Variables like PYTHONPATH, TORCHSERVE_CONFIG_FILE, LOG_LEVEL, MAPBOX_TOKEN
    # will be sourced from the .env file and made available to the container's environment.
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      PYTHONUNBUFFERED: 1
      # If DATABASE_URL and TORCHSERVE_URL are in your .env, you can remove them from here.
      # Otherwise, these provide defaults if not in .env (Compose substitutes ${...} from .env first).
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/whereisthisplace}
      TORCHSERVE_URL: ${TORCHSERVE_URL:-http://localhost:8080}
    volumes:
      # - ./api:/app/api:rw  # REMOVED: API code now comes from the Docker image.
      - ./ml:/app/ml:rw      # Mount local ./ml to /app/ml; remove if ML files are also in image and not to be overwritten.
      - ./scripts:/app/scripts:rw # Mount local ./scripts; remove if scripts are also in image and not to be overwritten.
      - ./logs:/app/logs:rw      # Mount host logs directory to persist container logs.
      # - ./models:/model-store:ro # Uncomment if you want to mount models from host instead of using those in the image.
      - ./config:/app/config:ro   # CRITICAL: Mounts host's ./config directory to /app/config for config.properties.
    ports:
      - "8000:8000" # FastAPI
      - "8080:8080" # TorchServe inference
      - "8081:8081" # TorchServe management
      - "8082:8082" # TorchServe metrics
    depends_on:
      postgres:
        condition: service_healthy
    command: /app/api/docker/start.sh

  adminer:
    image: adminer
    container_name: where-adminer
    ports:
      - "8090:8080"
    depends_on:
      - postgres
    networks:
      - whereisthisplace-network
    environment:
      - ADMINER_DEFAULT_SERVER=postgres

  loader:
    build:
      context: .
      dockerfile: api/docker/Dockerfile.cpu
      target: loader
    image: where-loader:gpu
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/whereisthisplace}
    volumes:
      - ./datasets:/app/datasets:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - whereisthisplace-network

volumes:
  postgres_data:
    driver: local

networks:
  whereisthisplace-network:
    driver: bridge