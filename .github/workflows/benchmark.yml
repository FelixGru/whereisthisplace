name: Benchmark Model Accuracy

on:
  push:
    branches: [main]
    paths:
      - "api/**"
      - "ml/**"
      - "models/**"
      - "scripts/benchmark.py"
      - "datasets/**"
      - ".github/workflows/benchmark.yml"
  pull_request:
    branches: [main]
    paths:
      - "api/**"
      - "ml/**"
      - "models/**"
      - "scripts/benchmark.py"
      - "datasets/**"
  workflow_dispatch:  # manual trigger

env:
  AWS_REGION: eu-central-1
  IMAGE_NAME: 726580147864.dkr.ecr.eu-central-1.amazonaws.com/where-backend

jobs:
  benchmark:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    services:
      postgres:
        image: postgis/postgis:16-3.5
        env:
          POSTGRES_PASSWORD: wherepass
          POSTGRES_USER: whereuser
          POSTGRES_DB: whereisthisplace
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository (incl. LFS)
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./api/docker/Dockerfile.gpu
        push: false
        load: true
        build-args: |
          CACHEBUST=${{ github.sha }}
        tags: |
          where-backend-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Initialize database
      run: |
        # Install PostgreSQL client
        sudo apt-get update && sudo apt-get install -y postgresql-client
        
        # Wait for PostgreSQL to be ready
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U whereuser; do sleep 2; done'
        
        # Install pgvector extension in the PostGIS container
        docker exec $(docker ps -q --filter ancestor=postgis/postgis:16-3.5) bash -c "
          apt-get update && 
          apt-get install -y postgresql-16-pgvector &&
          echo 'pgvector extension installed'
        " || echo "pgvector installation failed, will try alternative method"
        
        # Create database schema and install extensions
        PGPASSWORD=wherepass psql -h localhost -p 5432 -U whereuser -d whereisthisplace -c "
        CREATE EXTENSION IF NOT EXISTS postgis;
        CREATE EXTENSION IF NOT EXISTS vector;
        CREATE SCHEMA IF NOT EXISTS whereisthisplace;
        " || echo "Database initialization completed or already exists"

    - name: Run database migrations
      run: |
        # Start a temporary container to run migrations
        docker run --rm \
          --network host \
          -e DATABASE_URL="postgresql://whereuser:wherepass@localhost:5432/whereisthisplace" \
          where-backend-test:latest \
          /bin/bash -c '
            echo "Running Alembic migrations..."
            cd /app && /home/venv/bin/alembic upgrade head
            
            echo "Verifying table creation..."
            PGPASSWORD=wherepass psql -h localhost -p 5432 -U whereuser -d whereisthisplace -c "\dt"
            PGPASSWORD=wherepass psql -h localhost -p 5432 -U whereuser -d whereisthisplace -c "SELECT COUNT(*) as table_exists FROM information_schema.tables WHERE table_name = '\''photos'\'';"
          '

    - name: Start services
      run: |
        # Start the backend service with proper environment
        docker run -d \
          --name where-backend \
          --network host \
          -e DATABASE_URL="postgresql://whereuser:wherepass@localhost:5432/whereisthisplace" \
          -e TORCHSERVE_URL="http://localhost:8080" \
          -e TORCHSERVE_MANAGEMENT_URL="http://localhost:8081" \
          -e RATE_LIMIT_REQUESTS="1000" \
          -e RATE_LIMIT_PERIOD="3600" \
          where-backend-test:latest
        
        # Wait for TorchServe to start first
        echo "Waiting for TorchServe to start..."
        sleep 45
        
        # Check TorchServe health
        echo "Checking TorchServe..."
        timeout 30 bash -c 'until curl -f http://localhost:8081/models; do echo "Waiting for TorchServe..."; sleep 5; done'
        
        # Wait a bit more for FastAPI to start
        echo "Waiting for FastAPI to start..."
        sleep 15
        
        # Check if API is responding
        echo "Checking FastAPI health..."
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do echo "Waiting for FastAPI..."; sleep 5; done'

    - name: Set up Python for benchmark
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install benchmark dependencies
      run: |
        pip install requests numpy

    - name: Run benchmark on Paris dataset
      run: |
        echo "Running benchmark on Paris dataset..."
        python scripts/benchmark.py \
          --dataset-dir datasets/mapillary_paris \
          --api-url http://localhost:8000 \
          --threshold-km 25.0
        echo "✅ Paris dataset benchmark completed"

    - name: Run benchmark on all datasets (300 images)
      run: |
        echo "Running comprehensive benchmark on 300 randomly sampled images..."
        python scripts/benchmark.py \
          --dataset-dir datasets \
          --api-url http://localhost:8000 \
          --threshold-km 25.0 \
          --max-images 300
        echo "✅ Comprehensive benchmark completed"

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== Container status ==="
        docker ps -a || true
        echo "=== Backend logs ==="
        docker logs where-backend || true
        echo "=== TorchServe health check ==="
        curl -f http://localhost:8081/models || true
        echo "=== FastAPI health check ==="
        curl -f http://localhost:8000/health || true
        echo "=== Container inspect ==="
        docker inspect where-backend || true

    - name: Cleanup
      if: always()
      run: |
        docker stop where-backend || true
        docker rm where-backend || true 